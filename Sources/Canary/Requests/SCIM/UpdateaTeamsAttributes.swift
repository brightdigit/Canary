//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Prch


extension SCIM {

    /** Update a team's attributes with a SCIM Group PATCH Request. Valid Operations are:
* Renaming a team: 
```json
{
    "op": "replace",
    "value": {
        "id": 23,
        "displayName": "newName"
    }
}
```
* Adding a member to a team: 
```json
{
    "op": "add",
    "path": "members",
    "value": [
        {
            "value": 23,
            "display": "testexample@example.com"
        }
    ]
}
```
* Removing a member from a team: 
```json
{
    "op": "remove",
    "path": "members[value eq \"23\"]"
}
``` 
*  Replacing an entire member set of a team: 
```json
{
    "op": "replace",
    "path": "members",
    "value": [
        {
            "value": 23,
            "display": "testexample2@sentry.io"
        },
        {
            "value": 24,
            "display": "testexample3@sentry.io"
        }
    ]
}
``` */
    public enum UpdateaTeamsAttributes {

        public static let service = APIService<Response>(id: "Update a Team's Attributes", tag: "SCIM", method: "PATCH", path: "/api/0/organizations/{organization_slug}/scim/v2/Groups/{team_id}", hasBody: true, securityRequirements: [SecurityRequirement(type: "auth_token", scopes: ["team:write"])])

        public final class Request: APIRequest<Response> {

            /** Update a team's attributes with a SCIM Group PATCH Request. Valid Operations are:
            * Renaming a team: 
            ```json
            {
                "op": "replace",
                "value": {
                    "id": 23,
                    "displayName": "newName"
                }
            }
            ```
            * Adding a member to a team: 
            ```json
            {
                "op": "add",
                "path": "members",
                "value": [
                    {
                        "value": 23,
                        "display": "testexample@example.com"
                    }
                ]
            }
            ```
            * Removing a member from a team: 
            ```json
            {
                "op": "remove",
                "path": "members[value eq \"23\"]"
            }
            ``` 
            *  Replacing an entire member set of a team: 
            ```json
            {
                "op": "replace",
                "path": "members",
                "value": [
                    {
                        "value": 23,
                        "display": "testexample2@sentry.io"
                    },
                    {
                        "value": 24,
                        "display": "testexample3@sentry.io"
                    }
                ]
            }
            ``` */
            public struct Body: Model {

                public var schemas: [String]

                public init(schemas: [String]) {
                    self.schemas = schemas
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    schemas = try container.decodeArray("schemas")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(schemas, forKey: "schemas")
                }

            }

            public struct Options {

                /** The slug of the organization. */
                public var organizationSlug: String

                /** The id of the team you'd like to query. */
                public var teamId: Int

                public init(organizationSlug: String, teamId: Int) {
                    self.organizationSlug = organizationSlug
                    self.teamId = teamId
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: UpdateaTeamsAttributes.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(organizationSlug: String, teamId: Int, body: Body) {
                let options = Options(organizationSlug: organizationSlug, teamId: teamId)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "organization_slug" + "}", with: "\(self.options.organizationSlug)").replacingOccurrences(of: "{" + "team_id" + "}", with: "\(self.options.teamId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Success */
            case status204

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            /** Not Found. */
            case status404

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 401: self = .status401
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
