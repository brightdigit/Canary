//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Prch


extension Releases {

    /** List issues to be resolved in a particular release. */
    public enum ListIssuesToBeResolvedInaParticularRelease {

        public static let service = APIService<Response>(id: "List Issues to be Resolved in a Particular Release", tag: "Releases", method: "GET", path: "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/resolved/", hasBody: false, securityRequirements: [SecurityRequirement(type: "auth_token", scopes: ["project:releases"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The slug of the organization. */
                public var organizationSlug: String

                /** The slug of the project. */
                public var projectSlug: String

                /** The version identifier of the release. */
                public var version: String

                public init(organizationSlug: String, projectSlug: String, version: String) {
                    self.organizationSlug = organizationSlug
                    self.projectSlug = projectSlug
                    self.version = version
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: ListIssuesToBeResolvedInaParticularRelease.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(organizationSlug: String, projectSlug: String, version: String) {
                let options = Options(organizationSlug: organizationSlug, projectSlug: projectSlug, version: version)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "organization_slug" + "}", with: "\(self.options.organizationSlug)").replacingOccurrences(of: "{" + "project_slug" + "}", with: "\(self.options.projectSlug)").replacingOccurrences(of: "{" + "version" + "}", with: "\(self.options.version)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Success */
            case status200

            /** Forbidden */
            case status403

            /** Not Found */
            case status404

            public var success: Void? {
                switch self {
                case .status200: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
